import * as fs from 'fs/promises';
import * as path from 'path';
import * as url from 'url';
import {compile} from 'json-schema-to-typescript';

const dirname = path.dirname(url.fileURLToPath(import.meta.url));

async function main() {
  let schemas_path = path.join(dirname,'..','schemas');
  let schema_files = (await fs.readdir(schemas_path)).filter(x => x.endsWith('.json'));

  // deduplicate types
  const types = new Set();
  for (let file of schema_files) {
    let file_path = path.join(schemas_path,file);
    let schema = JSON.parse(await fs.readFile(file_path));
    console.log(`Processing ${file}`);
    let compiled = await compile(schema, schema.title, {bannerComment: '', enableConstEnums: false});

    let each_type = compiled.split('export');
    for (let type of each_type) {
      if (!type) continue;
      types.add(`export ${type.trim()}`);
    }
  }

  let output = Array.from(types).join('\n\n');
  let output_path = path.join(dirname,'src','modals','api_types.ts');

  try {
    let existing = await fs.readFile(output_path);
    if (existing === output) {
      console.log("Schemas are up to date");
      return;
    }
  } catch (e) {
    // fine if no output from previous run
    if(e.code !== 'ENOENT') {
      throw e;
    }
  }

  await fs.writeFile(output_path,"/*\n * AUTOGENERATED BY /generate_schema_ts.js\n * DO NOT EDIT THIS FILE UNLESS YOU KNOW WHAT YOU ARE DOING.\n*/\n" + output);
  console.log(`Schema types written to ${output_path}`);
}

main().catch(e => {
  console.error(e);
  process.exit(1);
})